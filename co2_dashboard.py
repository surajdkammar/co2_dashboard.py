# -*- coding: utf-8 -*-
"""Suraj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KS613UBY8YDKdDfaeUKKDJ7T0YPX2hJV
"""

pip install streamlit plotly pandas scikit-learn matplotlib

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Page Config
st.set_page_config(page_title="CO2 Emissions Dashboard", page_icon=":earth_africa:", layout="wide")
st.title("🚗 CO2 Emissions Analysis & Prediction Dashboard")

# File Upload
st.sidebar.header("Upload Your Dataset")
uploaded_file = st.sidebar.file_uploader("Upload CSV file", type=["csv"])

# Load Data and Process if file is uploaded
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    # Show Raw Data
    st.subheader("📊 Raw Data Preview")
    st.write(df.head())

    # Convert Date Column (if available)
    date_col = next((col for col in df.columns if "date" in col.lower()), None)
    if date_col:
        df[date_col] = pd.to_datetime(df[date_col])

    # Sidebar Filters
    st.sidebar.subheader("🔎 Data Filters")
    regions = st.sidebar.multiselect("Select Regions", df["Region"].unique() if "Region" in df.columns else [])
    if regions:
        df = df[df["Region"].isin(regions)]

    # Select Target Variable (CO2 Emission)
    co2_col = next((col for col in df.columns if "co2" in col.lower()), None)
    if co2_col is None:
        st.error("No CO2 emissions column found in the dataset.")
        st.stop()

    # Feature Selection
    numeric_cols = df.select_dtypes(include=["number"]).columns.tolist()
    categorical_cols = df.select_dtypes(include=["object"]).columns.tolist()

    # Preprocessing: Handle Categorical Variables
    label_encoders = {}
    for col in categorical_cols:
        if col != co2_col:  # Prevent error when co2 column is categorical
            le = LabelEncoder()
            df[col] = le.fit_transform(df[col])
            label_encoders[col] = le

    # Train Machine Learning Model
    X = df.drop(columns=[co2_col])
    y = df[co2_col]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Predictions
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    # Show Model Performance
    st.subheader("📈 Model Performance")
    st.write(f"🔹 **Mean Absolute Error (MAE):** {mae:.2f}")
    st.write(f"🔹 **Mean Squared Error (MSE):** {mse:.2f}")
    st.write(f"🔹 **R² Score:** {r2:.2f}")

    # Feature Importance
    feature_importance = pd.DataFrame({"Feature": X.columns, "Importance": model.feature_importances_})
    feature_importance = feature_importance.sort_values(by="Importance", ascending=False)

    st.subheader("🔍 Feature Importance")
    fig = px.bar(feature_importance, x="Importance", y="Feature", orientation="h",
                 title="Most Influential Factors on CO2 Emissions")
    st.plotly_chart(fig)

    # Trend Analysis
    if date_col:
        df["Month"] = df[date_col].dt.to_period("M")
        monthly_emissions = df.groupby("Month")[co2_col].mean().reset_index()
        st.subheader("📅 CO2 Emissions Over Time")
        fig = px.line(monthly_emissions, x="Month", y=co2_col, title="Monthly CO2 Emissions Trend", markers=True)
        st.plotly_chart(fig)

    # Region-wise CO2 Emissions
    if "Region" in df.columns:
        st.subheader("🌍 CO2 Emissions by Region")
        region_emissions = df.groupby("Region")[co2_col].mean().reset_index()
        fig = px.bar(region_emissions, x="Region", y=co2_col, title="Average CO2 Emissions per Region",
                     color="Region")
        st.plotly_chart(fig)

    # Recommendations
    st.subheader("🛠 Recommendations Based on Analysis")
    if not feature_importance.empty and feature_importance.iloc[0]["Feature"] in df.columns:
        top_factor = feature_importance.iloc[0]["Feature"]
        st.write(f"🚨 The most significant factor affecting CO2 emissions is **{top_factor}**.")

    st.markdown("""
    - 🔹 Reduce emissions in high-impact regions using renewable energy sources.
    - 🔹 Optimize fuel efficiency and introduce electric vehicles in top-emitting sectors.
    - 🔹 Enforce policies to limit CO2 emissions in industries contributing the most.
    - 🔹 Encourage public transport and carpooling in high-emission areas.
    - 🔹 Promote carbon capture technologies where emissions are highest.
    """)

    # Download Processed Data
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("📥 Download Processed Data", data=csv, file_name="Processed_CO2_Data.csv", mime="text/csv")

else:
    st.warning("Please upload a CSV file to proceed.")
    # Stop execution if no file is uploaded to prevent further errors
    st.stop()